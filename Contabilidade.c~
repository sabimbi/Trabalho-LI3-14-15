#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>

#include "Contabilidade.h"
#define TABLE_SIZE 200001

#undef get16bits
#if (defined(__GNUC__) && defined(__i386__)) || defined(__WATCOMC__) \
  || defined(_MSC_VER) || defined (__BORLANDC__) || defined (__TURBOC__)
#define get16bits(d) (*((const uint16_t *) (d)))
#endif

#if !defined (get16bits)
#define get16bits(d) ((((uint32_t)(((const uint8_t *)(d))[1])) << 8)\
                       +(uint32_t)(((const uint8_t *)(d))[0]) )
#endif

/* Estrutura interna */
struct Array{
    int quantidade;
    float facturacao;
};
struct HashTable{
    char* codProduto;
    Info arr;
    struct HashTable* next;
};
/* Variavel global da estutura */

static uint32_t SuperFastHash (const char * data, int len) {
uint32_t hash = len, tmp;
int rem;

    if (len <= 0 || data == NULL) return 0;

    rem = len & 3;
    len >>= 2;

    /* Main loop */
    for (;len > 0; len--) {
        hash  += get16bits (data);
        tmp    = (get16bits (data+2) << 11) ^ hash;
        hash   = (hash << 16) ^ tmp;
        data  += 2*sizeof (uint16_t);
        hash  += hash >> 11;
    }

    /* Handle end cases */
    switch (rem) {
        case 3: hash += get16bits (data);
                hash ^= hash << 16;
                hash ^= ((signed char)data[sizeof (uint16_t)]) << 18;
                hash += hash >> 11;
                break;
        case 2: hash += get16bits (data);
                hash ^= hash << 11;
                hash += hash >> 17;
                break;
        case 1: hash += (signed char)*data;
                hash ^= hash << 10;
                hash += hash >> 1;
    }

    /* Force "avalanching" of final 127 bits */
    hash ^= hash << 3;
    hash += hash >> 5;
    hash ^= hash << 4;
    hash += hash >> 17;
    hash ^= hash << 25;
    hash += hash >> 6;

    return hash%TABLE_SIZE;
}

/*Funções Públicas*/

void get_total_byMonths(Contabilidade table, int mes1, int mes2,int* totC, float* totF){
    int i, j, k, tC=0; float tF=0.0;
    struct HashTable* aux;
    for(i=0; i<TABLE_SIZE; i++){
        aux=table[i];
        while (aux){
            for(j=mes1; j<=mes2; j++){
                for(k=0; k<2; k++){
                    if(aux->arr){
                        tC+=aux->arr[j][k].quantidade;
                        tF+=aux->arr[j][k].facturacao;
                    }
                }
            }
            aux=aux->next;
        }        
    }
    *totC=tC;
    *totF=tF;
}
Contabilidade init_Contabilidade(){
    int i;
    Contabilidade table;
    table = (Contabilidade) malloc (sizeof(struct HashTable*)*TABLE_SIZE);
    for(i=0;i<TABLE_SIZE;i++){
        table[i]=NULL;
    }
    return table;
}
void get_NP_byMonth(Contabilidade cont, char* codProduto, int mes, int* totN, float* facN, int* totP, float*facP){
    int tN=0, fN=0;float tP=0.0, fP=0.0;
    unsigned id=SuperFastHash(codProduto, strlen(codProduto)), e=1;
    struct HashTable *aux=NULL;aux=cont[id];
    while(aux){
        if(strcmp(aux->codProduto,codProduto)==0){
           
            tN=aux->arr[mes][0].quantidade;
            
            fN=aux->arr[mes][0].facturacao;
            
            tP=aux->arr[mes][1].quantidade;
            
            fP=aux->arr[mes][1].facturacao;
            
            break;
        }
        aux=aux->next;
    }
    
    *totN=tN; *facN=fN; *totP=tP; *facP=fP;
}
char** get_codProducts_with_noBuyers(Contabilidade table){
    char** r=(char**) malloc (sizeof(char*));
    int i, rcount=0,j,e,k;
    Field aux=NULL;
    for(i=0; i<TABLE_SIZE; i++){
        aux=table[i];
        while(aux){
            for(j=e=0;j<13 && e==0;j++){
                for(k=e=0;k<2 && e==0;k++){
                    if(aux->arr[j][k].quantidade>0){
                        e=1;
                    }
                }
            }
            if(e==0){
                r[rcount]=strdup(aux->codProduto);
                rcount++;
                r=(char **) realloc(r,(rcount+1)*sizeof(char*));
            }
            aux=aux->next;
        }                
    }
    r[rcount]=NULL;
    return r;
}

Contabilidade insert_Contabilidade(Contabilidade table, char* codProduto, int mes, char prom, int qnt, float fac){
    unsigned id = SuperFastHash(codProduto, strlen(codProduto));
    int prom1=0, i, j;
    if(prom=='P') prom1=1;
    struct HashTable* aux=NULL, *new=NULL;
    int found=0;
    if (!table[id]){
        table[id] = (struct HashTable*) malloc (sizeof(struct HashTable));        
        table[id]->codProduto=strdup(codProduto);        
        table[id]->arr = (struct Array**) malloc (sizeof(struct Array*)*13);
                        for(i=0; i<13; i++){
                            table[id]->arr[i]=(struct Array*) malloc ((sizeof(struct Array))*2);
                          table[id]->arr[i][0].facturacao=0.0;
                                table[id]->arr[i][0].quantidade=0;
                                table[id]->arr[i][1].facturacao=0.0;
                                table[id]->arr[i][1].quantidade=0;
                        }
          
                            
        table[id]->next=NULL;  
        return table;
    }else{       
        aux=table[id];
        while(aux){
            if (strcmp(aux->codProduto, codProduto)==0){
                
              
                    aux->arr[mes][prom1].facturacao+=fac;
                    aux->arr[mes][prom1].quantidade+=qnt;
                    
                    found=1;
                    break;
            }
            aux=aux->next;
        }      
        if (!found){
            aux=NULL;
            aux = (struct HashTable*) malloc (sizeof(struct HashTable));
            
                aux->arr = (struct Array**) malloc (sizeof(struct Array*)*13);
                for(i=0; i<13; i++){
                    aux->arr[i]=(struct Array*) malloc (sizeof(struct Array)*2);
                    aux->arr[i][0].facturacao=0.0;
                                aux->arr[i][0].quantidade=0;
                                aux->arr[i][1].facturacao=0.0;
                                aux->arr[i][1].quantidade=0;
                }
                aux->arr[mes][prom1].facturacao+=fac;
                aux->arr[mes][prom1].quantidade+=qnt;
           
            aux->codProduto = strdup(codProduto);
            aux->next=table[id];
            table[id]=aux;
            return table;
        }
    }
    return table;

}
