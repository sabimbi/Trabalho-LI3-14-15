#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <time.h>
#include "CatalogoProdutos.h"
#include "Contabilidade.h"
#include "Compras.h"
#include "CatalogoClientes.h"
#define MAX 100
#define PAGE_SIZE 20

char *trim(char *linha) {
    int len = 0;
    while (isspace((linha[0]))) {
        (linha)++;
    }
    len = strlen(linha);
    while (isalnum(linha[len]) == 0) {
        linha[len] = '\0';
        len--;
    }


    return linha;
}

char** sep(CProdutos cat, CClientes c, char* line) {
    char** r = (char**) malloc(sizeof (char*)*6);
    int j = 0;

    char *aux = strdup(line);

    aux = strtok(aux, " ");
    while (aux) {

        r[j] = strdup(aux);
        j++;

        aux = strtok(NULL, " ");

    }
    for (j = 0; j < 6; j++) {
        r[j] = trim(r[j]);
    }
    if (containsProduto(cat, r[0]) == 1 && containsCliente(c, r[4]) == 1 && ((strcmp(r[3], "P") == 0) || (strcmp(r[3], "N") == 0))) {
        return r;
    } else {

        return NULL;
    }
}

double get_ExecutionTime(clock_t Begin, clock_t End) {
    double r = ((double) End - Begin) / CLOCKS_PER_SEC;
    return r;
}

void Menu() {
    printf("Bem vindo ao GESTHIPER\n");
    printf("1: Ler os 3 ficheiros (Produtos, Clientes e Compras)\n");
    printf("2: Determinar a lista e o total de produtos cujo código se inicia por uma dada letra(maiúscula)\n");
    printf("3: Dado um mês e um código de produto válidos, determinar e apresentar o número total de vendas em modo N e em modo P, e o total facturado com esse produto em tal mês\n");
    printf("4: Determinar a lista de códigos de produtos (e o seu número total), que ninguém comprou\n");
    printf("5: Dado um código de cliente, criar uma tabela com o número total de produtos comprados, mês a mês\n");
    printf("6: Determinar a lista de todos os códigos de clientes iniciados pela letra dada como parâmetro\n");
    printf("7: Dado um intervalo fechado de meses, determinar o total de compras registadas nesse intervalo e o total facturado\n");
    printf("8: Dado um código de produto, determinar os códigos (e número total) dos clientes que o compraram, distinguido entre compra N e compra P\n");
    printf("9:  Dado um código de cliente e um mês, determinar a lista de códigos de produtos que mais comprou, por ordem descendente\n");
    printf("10:  Determinar a lista de códigos de clientes que realizaram compras em todos osmeses do ano\n");
    printf("11: Criar um ficheiro em formato CSV, contendo para cada mês em que há compras registadas, o número de compras realizadas e onúmero total de clientes que realizaram tais compras\n");
    printf("12: Criar uma lista dos N produtos mais vendidos em todo o ano, indicando o número total de clientes e o número de unidades vendidas\n");
    printf("13: Dado um código de cliente determinar quais os 3 produtos que mais comproudurante o ano\n");
    printf("14: Determinar o número de clientes registados que não realizaram compras bem como o número de produtos que ninguém comprou\n");
    printf("15: Sair\n");
    printf("Opção: ");

}

void print_page(char** strArr, int n, int pageNumber) {
    int e = 1, i = 0, max = 0;
    if (pageNumber * PAGE_SIZE >= n) e = 0;
    if (e) {
        if (pageNumber != 0)i = pageNumber * PAGE_SIZE;
        max = i + PAGE_SIZE;
    }

    printf("-------------------------------------------------------------------\n");
    if (i == max)printf("-------------------------------END---------------------------------\n");
    for (; strArr[i] && i < max; i++) {
        printf("|%s                            |                        %s|\n", strArr[i], strArr[i + 1]);
    }
    printf("-------------------------------------------------------------------\n");
    printf("--PAGE %d--\n", pageNumber + 1);
    printf("ESP - Exit   A - Last Page    D-Next Page\n");
}

int list_size(char** list) {
    int i;
    for (i = 0; list[i]; i++);
    return i;
}
void query14();
void query13();
void query12();
void query11();
void query10();
void query9();
void query8(Compras table,char* codProduto){
    char **codN=NULL;
    char **codP=NULL;
    int i;
    int totalN=0,totalP=0;
    
    get_product_buyers(table, trim(codProduto),&codN, &totalN, &codP, &totalP);
    printf("-----------------\n");
    printf("|   Clientes N  |\n");
    printf("-----------------\n");
    for(i=0;codN[i] ;i++){
    printf("|   ");
        if(codN[i]!=NULL){
        printf("  %s",codN[i]);
        }
    printf("     |\n");
         
    }
    printf("-----------------\n");
    printf("|  Clientes P   |\n");
    printf("-----------------\n");
    for(i=0;codP[i] ;i++){
    printf("|  ");
        if(codP[i]!=NULL){
            printf("   %s",codP[i]);
        }
          printf("     |\n");
    }
    printf("-----------------\n");
}

void query7(Contabilidade table, int mes1, int mes2) {
int totC=0;
float totF=0.0;    
get_total_byMonths(table, mes1, mes2,&totC, &totF);
printf("Mes Intervalo: [%d,%d]\n",mes1,mes2);
printf("Total Vendido: %d\n",totC );
    printf("Total Facturado: %f\n",totF);
}

void query6(char **strArr) {
    int size = list_size(strArr), e = 1, page = 0;
    char opt;
    print_page(strArr, size, 0);
    while (e) {
        opt = getchar();

        opt = toupper(opt);

        /*left*/
        if (opt == 65) {
            if (page != 0) {
                page--;
                print_page(strArr, size, page);
            }
        }
        /*right*/
        if (opt == 68) {
            if (page * PAGE_SIZE <= size)page++;
            print_page(strArr, size, page);
        }
        if (opt == 27) e = 0;
        getchar();
    }


}
void query5();

void query4(char ** strArr) {
    int size = list_size(strArr), e = 1, page = 0;
    char opt;
    printf("Nº de produto ninguem comprou: %d\n", size);
    print_page(strArr, size, 0);
    while (e) {
        opt = getchar();

        opt = toupper(opt);

        /*left*/
        if (opt == 65) {
            if (page != 0) {
                page--;
                printf("Nº de produto ninguem comprou: %d\n", size);
                print_page(strArr, size, page);
            }
        }
        /*right*/
        if (opt == 68) {
            if (page * PAGE_SIZE <= size)page++;
            printf("Nº de produto ninguem comprou: %d\n", size);
            print_page(strArr, size, page);
        }
        if (opt == 27) e = 0;
        getchar();
    }
    for (e = 0; e < size; e++) {
        free(strArr[e]);
    }

}

void query3(Contabilidade cnt, int mes, char* codProduto) {
    int tVN = 0, tVP = 0;
    float tFP = 0.0, tFN = 0.0;
    get_NP_byMonth(cnt, codProduto, mes, &tVN, &tFN, &tVP, &tFP);

    printf("--Modo Normal--\n");
    printf("Total de Vendas: %d\n", tVN);
    printf("Total Facturado: %f\n", tFN);
    printf("--Modo Promoção--\n");
    printf("Total de Vendas: %d\n", tVP);
    printf("Total Facturado: %f\n", tFP);

}

void query2(char** strArr) {
    int size = list_size(strArr), e = 1, page = 0;
    char opt;
    printf("%d\n",size);
    print_page(strArr, size, 0);
    while (e) {
        opt = getchar();

        opt = toupper(opt);

        /*left*/
        if (opt == 'A') {
            if (page != 0) {
                page--;
                print_page(strArr, size, page);
            }
        }
        /*right*/
        if (opt == 'D') {
            if (page * PAGE_SIZE <= size)page++;
            print_page(strArr, size, page);
        }
        if (opt == 27) e = 0;
        
    }
    for (e = 0; e < size; e++) {
        free(strArr[e]);
    }

}

int main() {
    char* line = NULL, *file1 = NULL, *file2 = NULL, *file3 = NULL;
    char** lineInfo = NULL;
    FILE* fp;
    char **arr = NULL;
    int i = 0, mes1 = 0, mes2 = 0;
    
    int nl = 0, nv = 0;
    char letter = ' ';
    CProdutos catalogop = NULL;
    CClientes catalogoc = NULL;
    Contabilidade contabilidade = NULL;
    Compras compras =NULL;

    clock_t begin, end;
    begin = clock();
    while (i != 15) {
        Menu();
        if (scanf("%d", &i) <= 0) {
            printf("Opção inválida!\n");
        }
        getchar();
        switch (i) {
            case 1:
            {
                catalogop = init_CatalogoProduto();

                catalogoc = init_CatalogoCliente();
                contabilidade = init_Contabilidade();
                compras = init_Compras();

                line = (char*) malloc(sizeof (char)*MAX);
                file1 = (char*) malloc(sizeof (char)*MAX);
                file2 = (char*) malloc(sizeof (char)*MAX);
                file3 = (char*) malloc(sizeof (char)*MAX);
                printf("Ficheiro de Produtos: ");
                if (fgets(file1, MAX, stdin)) printf("Ficheiro de Clientes: ");
                if (fgets(file2, MAX, stdin)) printf("Ficheiro de Compras: ");
                file3 = fgets(file3, MAX, stdin);

                file1 = trim(file1);
                file2 = trim(file2);
                file3 = trim(file3);

                if (strcmp(file1, "") == 0) {
                    file1 = strdup("FichProdutos.txt");
                }
                if (strcmp(file2, "") == 0) {
                    file2 = strdup("FichClientes.txt");
                }
                if (strcmp(file3, "") == 0) {
                    file3 = strdup("Compras.txt");
                }

                printf("Ficheiro de Produtos: %s\n", file1);
                fp = fopen(file1, "r");
                begin = clock();
                while ((line = fgets(line, MAX, fp))) {
                    line = trim(line);
                    contabilidade = insert_Contabilidade(contabilidade, line, 0, 'P', 0, 0.0);

                    catalogop = insert_CatalogoProduto(catalogop, line);

                    nl++;
                    nv++;
                }
                printf("Linhas lidas: %d\nLinhas validadas:%d\n", nl, nv);
                end = clock();
                nl = nv = 0;
                printf("Tempo de Execução Catálogo de Produtos + Produtos Contabilidade: %fs \n", get_ExecutionTime(begin, end));
                fclose(fp);

                free(file1);
                free(line);
                line = (char*) malloc(sizeof (char)*MAX);
                begin = clock();
                printf("Ficheiro de Clientes: %s\n", file2);
                fp = fopen(file2, "r");
                while ((line = fgets(line, MAX, fp))) {
                    line = trim(line);
                    catalogoc = insert_CatalogoCliente(catalogoc, line);
                    nl++;
                    nv++;
                }
                printf("Linhas lidas: %d\nLinhas validadas:%d\n", nl, nv);
                nl = nv = 0;
                free(line);
                free(file2);
                line = (char*) malloc(sizeof (char)*MAX);
                end = clock();
                printf("Tempo de Execução Catálogo de Clientes: %fs \n", get_ExecutionTime(begin, end));
                fclose(fp);

                printf("Ficheiro de Compras: %s\n", file3);
                fp = fopen(file3, "r");
                while ((line = fgets(line, MAX, fp))) {
                    line = trim(line);
                    lineInfo = sep(catalogop, catalogoc, line);
                    nl++;
                    if (lineInfo != NULL) {
                        nv++;
                        contabilidade = insert_Contabilidade(contabilidade, lineInfo[0], atoi(lineInfo[5]), lineInfo[3][0], atoi(lineInfo[2]), atof(lineInfo[1]) * atoi(lineInfo[2]));
                        
                        compras = insert_Compras(compras, lineInfo[0], lineInfo[4], atoi(lineInfo[2]), atoi(lineInfo[5]),lineInfo[3][0]);

                        for (i = 0; i < 5; i++) {
                            free(lineInfo[i]);
                        }
                        free(lineInfo);
                    }
                }
                printf("Linhas lidas: %d\nLinhas validadas:%d\n", nl, nv);
                nl = nv = 0;
                free(line);
                free(file3);
                end = clock();
                printf("Tempo de Execução de Compras+Contabilidade: %fs \n", get_ExecutionTime(begin, end));

                fclose(fp);

                break;
            }
            case 2:
            {
                printf("Insira a letra: ");
                letter = getchar();
                arr = NULL;
                arr = get_productList(catalogop, arr, toupper(letter));
                query2(arr);
                break;
            }
            case 3:
            {
                line = (char*) malloc(sizeof (char)*MAX);
                printf("Insira o código de produto: ");
                fgets(line, MAX, stdin);

                printf("Mês pretendido: ");
                scanf("%d", &mes1);
                getchar();
                query3(contabilidade, mes1, trim(line));
                free(line);
                break;
            }
            case 4:
            {
                if (contabilidade) {
                    arr = NULL;
                    
                    arr = get_codProducts_with_noBuyers(contabilidade);
                    query4(arr);
                }
                break;
            }
            case 6:{
                printf("Insira a letra: ");
                letter = getchar();
                arr = NULL;
                arr = get_clientList(catalogoc, arr, toupper(letter));
                query6(arr);
                break;
            }
            case 7:
            {
                if (contabilidade) {
                    printf("Mes 1: ");
                    scanf("%d", &mes1);
                    getchar();
                    printf("Mes 2: ");
                    scanf("%d", &mes2);
                    query7(contabilidade, mes1, mes2);
                }
                break;
            }
            case 8:{
                line = (char*) malloc(sizeof (char)*MAX);
                printf("Insira o código de produto: ");
                fgets(line, MAX, stdin);
                
                if(compras)query8(compras,line);
                free(line);
                break;
            }
        }
    }
    /*
     */
    return (EXIT_SUCCESS);
}



